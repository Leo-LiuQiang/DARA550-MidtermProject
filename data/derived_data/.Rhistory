a
# 3.3 Getting and setting attributes
## function attributes(object)
## function attr(object, name) can be used to select a specific attribute
a <- cbind(c(1:10),c(1:10), c(1:10), c(1:10), c(1:10), c(1:10), c(1:10), c(1:10), c(1:10), c(1:10))
a
# 4.1 A specific example
state <- c("tas", "sa",  "qld", "nsw", "nsw", "nt",  "wa",  "wa",
"qld", "vic", "nsw", "vic", "qld", "qld", "sa",  "tas",
"sa",  "nt",  "wa",  "vic", "qld", "nsw", "nsw", "wa",
"sa",  "act", "nsw", "vic", "vic", "act")
#  “sorted” means sorted in alphabetical order.
state
statef <- factor(state)
statef
levels(statef)
# 4.2 The function tapply() and ragged arrays
incomes <- c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56,
61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46,
59, 46, 58, 43)
# function tapply()
incmeans <- tapply(incomes, statef, mean)
incmeans
# apply a function, here mean(), to each group of components of the first
# argument, here incomes, defined by the levels of the second component, here
# statef15, as if they were separate vector structures.
## mean() var()
stdError <- function(x) sqrt(var(x)/length(x))
stdError
incster <- tapply(incomes, statef, stdError)
incster
# 4.3 Ordered factors
state_ordered <- ordered(state)
v
state_ordered
incomes_ordered <- ordered(incomes)
incomes
incomes_ordered
levels(incomes_ordered )
typeof
LETTERS
letters
pi
month.
month
month.name
month.abb
for (pT in T_rate){
for (pC in C_rate){
print(paste("T_rate=", pT, ", C_rate=", pC))
st1=1-pT
st2=1-pC
lambda1 <- -log(st1)
lambda2 <- -log(st2)
print(lambda1)
print(lambda2)
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=2, Tr=1,
alpha=alpha, beta=beta, side=2 )
cat("   ", ss$n, "\n")
cat("   ",  "Upward Integer=", ceiling(ss$n),"\n")
}
}
T_rate <- c(0.02, 0.05, 0.08)
C_rate <- c(0.25, 0.20, 0.17)
alpha <- 0.05
beta <- 0.20
for (pT in T_rate){
for (pC in C_rate){
print(paste("T_rate=", pT, ", C_rate=", pC))
st1=1-pT
st2=1-pC
lambda1 <- -log(st1)
lambda2 <- -log(st2)
print(lambda1)
print(lambda2)
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=2, Tr=1,
alpha=alpha, beta=beta, side=2 )
cat("   ", ss$n, "\n")
cat("   ",  "Upward Integer=", ceiling(ss$n),"\n")
}
}
## T_rate = 2,5,8% C_rate = 25,20,17%
library(gsDesign)
T_rate <- c(0.02, 0.05, 0.08)
C_rate <- c(0.25, 0.20, 0.17)
alpha <- 0.05
beta <- 0.20
for (pT in T_rate){
for (pC in C_rate){
print(paste("T_rate=", pT, ", C_rate=", pC))
st1=1-pT
st2=1-pC
lambda1 <- -log(st1)
lambda2 <- -log(st2)
print(lambda1)
print(lambda2)
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=2, Tr=1,
alpha=alpha, beta=beta, side=2 )
cat("   ", ss$n, "\n")
cat("   ",  "Upward Integer=", ceiling(ss$n),"\n")
}
}
for (pT in T_rate){
for (pC in C_rate){
print(paste("T_rate=", pT, ", C_rate=", pC))
st1=1-pT
st2=1-pC
lambda1 <- -log(st1)
lambda2 <- -log(st2)
print(lambda2/lambda1)
print(lambda2)
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=2, Tr=1,
alpha=alpha, beta=beta, side=2 )
cat("   ", ss$n, "\n")
cat("   ",  "Upward Integer=", ceiling(ss$n),"\n")
}
}
for (pT in T_rate){
for (pC in C_rate){
print(paste("T_rate=", pT, ", C_rate=", pC))
st1=1-pT
st2=1-pC
lambda1 <- -log(st1)
lambda2 <- -log(st2)
print(lambda1/lambda2)
print(lambda2)
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=2, Tr=1,
alpha=alpha, beta=beta, side=2 )
cat("   ", ss$n, "\n")
cat("   ",  "Upward Integer=", ceiling(ss$n),"\n")
}
}
T_rate <- c(0.02, 0.05, 0.08)
C_rate <- c(0.25, 0.20, 0.17)
alpha <- 0.05
beta <- 0.20
for (pT in T_rate){
for (pC in C_rate){
print(paste("T_rate=", pT, ", C_rate=", pC))
st1=1-pT
st2=1-pC
lambda1 <- -log(st1)
lambda2 <- -log(st2)
print(lambda1/lambda2)
print(lambda2)
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=2, Tr=1,
alpha=alpha, beta=beta, side=2 )
cat("   ", ss$n, "\n")
cat("   ",  "Upward Integer=", ceiling(ss$n),"\n")
}
}
library(gsDesign)
#-----
st1 <- 0.4
st2 <- 0.6
alpha <- 0.05
beta <- 0.1
lambda1 <- -log(st1)
lambda2 <- -log(st2)
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=5, Tr=1,
alpha=alpha, beta=beta, side=2)
cat("   ", ss, "\n")
st1 <- 0.4
st2 <- 0.6
alpha <- 0.05
beta <- 0.1
lambda1 <- -log(st1)
lambda2 <- -log(st2)
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=5, Tr=1,
alpha=alpha, beta=beta, side=2)
ss
cat("   ", ss$n, "\n")
cat("   ",  "Upward Integer=", ceiling(ss$n),"\n")
# one-sided
alpha <- 0.025 # two-sided=0.25, one-sided=0.5
beta <- 0.20
ratio <- 1.5  # lambda1/lambda2
zalpha <- qnorm(alpha)
zbeta <- qnorm(beta)
num <- 2*(zalpha+zbeta)^2
denorm <- (log(ratio))^2
N=num/denorm
print(N)
# one-sided
alpha <- 0.5 # two-sided=0.25, one-sided=0.5
beta <- 0.20
ratio <- 1.5  # lambda1/lambda2
zalpha <- qnorm(alpha)
zbeta <- qnorm(beta)
num <- 2*(zalpha+zbeta)^2
denorm <- (log(ratio))^2
N=num/denorm
print(N)
# one-sided
alpha <- 0.05 # two-sided=0.25, one-sided=0.05
beta <- 0.20
ratio <- 1.5  # lambda1/lambda2
zalpha <- qnorm(alpha)
zbeta <- qnorm(beta)
num <- 2*(zalpha+zbeta)^2
denorm <- (log(ratio))^2
N=num/denorm
print(N)
#-----
st1 <- 0.4
st2 <- 0.6
alpha <- 0.05
beta <- 0.1
lambda1 <- -log(st1)
lambda2 <- -log(st2)
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=5, Tr=4,
alpha=alpha, beta=beta, side=2)
ss
cat("   ", ss$n, "\n")
cat("   ",  "Upward Integer=", ceiling(ss$n),"\n")
# Q7-----
st1 <- 0.4
st2 <- 0.6
alpha <- 0.05
beta <- 0.1
lambda1 <- -log(st1)
lambda2 <- -log(st2)
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=5, Tr=4,
alpha=alpha, beta=beta, side=1)
ss
cat("   ", ss$n, "\n")
cat("   ",  "Upward Integer=", ceiling(ss$n),"\n")
# Q7-----
st1 <- 0.4
st2 <- 0.6
alpha <- 0.05
beta <- 0.1
lambda1 <- -log(st1)/4
lambda2 <- -log(st2)/4
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=5, Tr=4,
alpha=alpha, beta=beta, side=2)
ss
cat("   ", ss$n, "\n")
cat("   ",  "Upward Integer=", ceiling(ss$n),"\n")
# Q7-----
st1 <- 0.4
st2 <- 0.6
alpha <- 0.05
beta <- 0.1
lambda1 <- -log(st1)/4
lambda2 <- -log(st2)/4
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=5, Tr=4,
alpha=alpha, beta=beta, side=1)
ss
cat("   ", ss$n, "\n")
cat("   ",  "Upward Integer=", ceiling(ss$n),"\n")
# Q7-----
st1 <- 0.4
st2 <- 0.6
lambda1 <- -log(st1)/5
lambda2 <- -log(st2)/5
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=5, Tr=4,
alpha=0.05, beta=0.1, side=1)
ss
# Q7-----
st1 <- 0.4
st2 <- 0.6
lambda1 <- -log(st1)/5
lambda2 <- -log(st2)/5
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=5, Tr=4,
alpha=0.05, beta=0.1, side=2)
ss
374
374/2
306/2
-log(0.5)/2
library(gsDesign)
T_rate <- c(0.02, 0.05, 0.08)
C_rate <- c(0.25, 0.20, 0.17)
alpha <- 0.05
beta <- 0.20
for (pT in T_rate){
for (pC in C_rate){
print(paste("T_rate=", pT, ", C_rate=", pC))
st1=1-pT
st2=1-pC
lambda1 <- -log(st1)
lambda2 <- -log(st2)
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=2, Tr=1,
alpha=alpha, beta=beta, side=2 )
cat("   ", ss$n, "\n")
cat("   ",  "Upward Integer=", ceiling(ss$n),"\n")
}
}
library(gsDesign)
library(gsDesign)
T_rate <- c(0.02, 0.05, 0.08)
C_rate <- c(0.25, 0.20, 0.17)
alpha <- 0.05
beta <- 0.20
for (pT in T_rate){
for (pC in C_rate){
print(paste("T_rate=", pT, ", C_rate=", pC))
st1=1-pT
st2=1-pC
lambda1 <- -log(st1)
lambda2 <- -log(st2)
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=2, Tr=1,
alpha=alpha, beta=beta, side=2 )
cat("   ", ss$n, "\n")
cat("   ", "nEvent", ss$nEvents, "\n")
cat("   ",  "Upward Integer=", ceiling(ss$n),"\n")
}
}
T_rate <- c(0.02, 0.05, 0.08)
C_rate <- c(0.25, 0.20, 0.17)
alpha <- 0.05
beta <- 0.20
for (pT in T_rate){
for (pC in C_rate){
print(paste("T_rate=", pT, ", C_rate=", pC))
st1=1-pT
st2=1-pC
lambda1 <- -log(st1)
lambda2 <- -log(st2)
zalpha <- qnorm(alpha)
zbeta <- qnorm(beta)
num <- 2*(zalpha+zbeta)^2
denorm <- (log(lambda1/lambda2))^2
N=num/denorm
print(N)
}
}
T_rate <- c(0.02, 0.05, 0.08)
C_rate <- c(0.25, 0.20, 0.17)
alpha <- 0.05
beta <- 0.20
for (pT in T_rate){
for (pC in C_rate){
print(paste("T_rate=", pT, ", C_rate=", pC))
st1=1-pT
st2=1-pC
lambda1 <- -log(st1)
lambda2 <- -log(st2)
zalpha <- qnorm(alpha)
zbeta <- qnorm(beta)
num <- 2*(zalpha+zbeta)^2
denorm <- (log(lambda1/lambda2))^2
N=num/denorm
print(paste0("N per group: ",N, "N total: ", N*2))
}
}
for (pT in T_rate){
for (pC in C_rate){
print(paste("T_rate=", pT, ", C_rate=", pC))
st1=1-pT
st2=1-pC
lambda1 <- -log(st1)
lambda2 <- -log(st2)
zalpha <- qnorm(alpha)
zbeta <- qnorm(beta)
num <- 2*(zalpha+zbeta)^2
denorm <- (log(lambda1/lambda2))^2
N=num/denorm
print(paste0("N per group: ", ceiling(N) , "N total: ", ceiling(N)*2))
}
}
T_rate <- c(0.02, 0.05, 0.08)
C_rate <- c(0.25, 0.20, 0.17)
alpha <- 0.05
beta <- 0.20
for (pT in T_rate){
for (pC in C_rate){
print(paste("T_rate=", pT, ", C_rate=", pC))
st1=1-pT
st2=1-pC
lambda1 <- -log(st1)
lambda2 <- -log(st2)
zalpha <- qnorm(alpha)
zbeta <- qnorm(beta)
num <- 2*(zalpha+zbeta)^2
denorm <- (log(lambda1/lambda2))^2
N=num/denorm
print(paste0("N per group: ", ceiling(N) , ", N total: ", ceiling(N)*2))
}
}
T_rate <- c(0.02, 0.05, 0.08)
C_rate <- c(0.25, 0.20, 0.17)
alpha <- 0.05
beta <- 0.20
for (pT in T_rate){
for (pC in C_rate){
print(paste("T_rate=", pT, ", C_rate=", pC))
st1=1-pT
st2=1-pC
lambda1 <- -log(st1)
lambda2 <- -log(st2)
zalpha <- qnorm(alpha)
zbeta <- qnorm(beta)
num <- 2*(zalpha+zbeta)^2
denorm <- (log(lambda1/lambda2))^2
N=num/denorm
print(paste0("Calculated N: ", rounf(N,2), "N per group: ", ceiling(N) , ", N total: ", ceiling(N)*2))
}
}
T_rate <- c(0.02, 0.05, 0.08)
C_rate <- c(0.25, 0.20, 0.17)
alpha <- 0.05
beta <- 0.20
for (pT in T_rate){
for (pC in C_rate){
print(paste("T_rate=", pT, ", C_rate=", pC))
st1=1-pT
st2=1-pC
lambda1 <- -log(st1)
lambda2 <- -log(st2)
zalpha <- qnorm(alpha)
zbeta <- qnorm(beta)
num <- 2*(zalpha+zbeta)^2
denorm <- (log(lambda1/lambda2))^2
N=num/denorm
print(paste0("Calculated N: ", round(N,2), "N per group: ", ceiling(N) , ", N total: ", ceiling(N)*2))
}
}
T_rate <- c(0.02, 0.05, 0.08)
C_rate <- c(0.25, 0.20, 0.17)
alpha <- 0.05
beta <- 0.20
for (pT in T_rate){
for (pC in C_rate){
print(paste("T_rate=", pT, ", C_rate=", pC))
st1=1-pT
st2=1-pC
lambda1 <- -log(st1)
lambda2 <- -log(st2)
zalpha <- qnorm(alpha)
zbeta <- qnorm(beta)
num <- 2*(zalpha+zbeta)^2
denorm <- (log(lambda1/lambda2))^2
N=num/denorm
print(paste0("Calculated N: ", round(N,2), ", N per group: ", ceiling(N) , ", N total: ", ceiling(N)*2))
}
}
T_rate <- c(0.02, 0.05, 0.08)
C_rate <- c(0.25, 0.20, 0.17)
alpha <- 0.05
beta <- 0.20
for (pT in T_rate){
for (pC in C_rate){
print(paste("T_rate=", pT, ", C_rate=", pC))
st1=1-pT
st2=1-pC
lambda1 <- -log(st1)
lambda2 <- -log(st2)
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=2, Tr=1,
alpha=alpha, beta=beta, side=2 )
cat("   ", ss$n, "\n")
cat("   ", "nEvent", ss$nEvents, "\n")
cat("   ",  "Upward Integer=", ceiling(ss$n),"\n")
}
}
library(gsDesign)
T_rate <- c(0.02, 0.05, 0.08)
C_rate <- c(0.25, 0.20, 0.17)
alpha <- 0.05
beta <- 0.20
for (pT in T_rate){
for (pC in C_rate){
print(paste("T_rate=", pT, ", C_rate=", pC))
st1=1-pT
st2=1-pC
lambda1 <- -log(st1)
lambda2 <- -log(st2)
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=2, Tr=1,
alpha=alpha, beta=beta, side=2 )
cat("   ", ss$n, "\n")
cat("   ", "nEvent", ss$nEvents, "\n")
cat("   ",  "Upward Integer=", ceiling(ss$n),"\n")
}
}
print(pwr.t.test(d=0.5, sig.level=0.05, power=0.8, type="two.sample", alternative="two.sided"))
library(pwr)
### Q4  -----------------------------------------------------------
print(pwr.t.test(d=0.5, sig.level=0.05, power=0.8, type="two.sample", alternative="two.sided"))
print(pwr.t2n.test(d=0.5, sig.level=0.05, power=0.8, type="two.sample", alternative="two.sided"))
print(pwr.t.test(d=0.5, sig.level=0.05, power=0.8, type="two.sample", alternative="two.sided"))
print(power.prop.test(power=0.9,p1=0.4,p2=0.55))
st1 <- 0.4
st2 <- 0.6
lambda1 <- -log(st1)/5
lambda2 <- -log(st2)/5
ss=nSurvival(lambda1=lambda1, lambda2=lambda2, eta=0, Ts=5, Tr=4,
alpha=0.05, beta=0.1, side=2)
ss
### Q6  -----------------------------------------------------------
# one-sided
alpha <- 0.05 # two-sided=0.025, one-sided=0.05
beta <- 0.20
ratio <- 1.5  # lambda1/lambda2
zalpha <- qnorm(alpha)
zbeta <- qnorm(beta)
num <- 2*(zalpha+zbeta)^2
denorm <- (log(ratio))^2
N=num/denorm
print(N)
# two-sided
alpha <- 0.025
beta <- 0.20
ratio <- 1.5  # lambda1/lambda2
zalpha <- qnorm(alpha)
zbeta <- qnorm(beta)
num <- 2*(zalpha+zbeta)^2
denorm <- (log(ratio))^2
N=num/denorm
print(N)
install.packages("lattice")
install.packages("lattice")
